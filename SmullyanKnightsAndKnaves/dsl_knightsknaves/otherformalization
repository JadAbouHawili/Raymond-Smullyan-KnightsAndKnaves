advantages of current set theoretic formalization:
not do any weird things behind the scenes, show the logical and set theoretic expressions which the user would be used to by now.

using inductive types or sum types:
big disadvantage: goes against all the previous build up... remember that the game started with knights and knaves having set theoretic and logic formalization then backtracking...
- advantage: maybe as an interesting side project formalization

inductive Xor'' (P Q : Prop) : Prop
| introL (p : P) (np : ¬Q) 
| introR (q : Q) (nq : ¬P) 

  -- maybe do Knights and Knaves thing as inductive type...
  /-
  inhabitant
  | Knight
  | Knave
  -/

--variable (Inhabitant : Type)
--#check (Sum Inhabitant Inhabitant)
--variable (Knight Knave : Type)
--variable (A : Sum Knight Knave)
--inductive A where
--| Knight
--| Knave

-- Define a sum type that can be either an integer or a boolean
--inductive Inhabitant
--| int 
--| bool 
--variable (B : Knight)
--example : ( Sum.inl A ∈ Knight) := by
--  cases A 
  
--variable (Knight: Type) (Knave : Type)
--def Inhabitant := (Sum Knight Knave)
--#check Inhabitant
--example (A : Inhabitant Knight Knave) : 2=2  := sorry

/-
inductive Weekday where
  | sunday : Weekday
  | monday : Weekday
  | tuesday : Weekday
  | wednesday : Weekday
  | thursday : Weekday
  | friday : Weekday
  | saturday : Weekday
inductive Inhabitant where 
| Knight'
| Knave'

#check Inhabitant.Knave'
#check Inhabitant.Knight'
example (A : Inhabitant) : 2=2 :=  
  match A with 
  | Knight' => sorry
  | Knave' => sorry
-/




